{
    "title": "Spreadsheet import input",
    "type": "object",
    "schemaVersion": 1,
    "required": [],
    "properties": {
        "inputId": {
            "title": "Input Id",
            "type": "string",
            "description": "Id of dataset, crawler execution or key value store where the data are located. Image URLs will be extracted from there.",
            "editor": "textfield"
        },
        "recordKey": {
            "title": "Record Key",
            "type": "string",
            "description": "Only specify if input id points to a key value store! This is the record key under which the data are.",
            "editor": "textfield"
        },
        "outputTo": {
            "title": "Output to",
            "type": "string",
            "description": "Where to save the output with enhanced data.",
            "enum": ["no-output", "key-value-store", "dataset"]
        },
        "pathToImageUrls": {
            "title": "Path to image URLs",
            "type": "string",
            "description": "Path from item object to an array or string where the URL(s) is/are located. Provide in \"javascript style\", e.g. \"details[0].images\n",
            "editor": "textfield",
            "prefill": "images"
        },
        "fileNameFunction": {
            "title": "Filename function",
            "type": "string",
            "description": "Function that specifies how will be image filename created from its URL. If you keep this epmty, it will be md5 hash of the URL.",
            "editor": "javascript"
        },
        "preDownloadFunction": {
            "title": "Pre-download function",
            "type": "string",
            "description": "Function that specifies how will be the data transformed before downloading the image. The input and output of the function is the whole data array. You can skip downloading images of any item if you add skipItem: true field to it.",
            "editor": "javascript"
        },
        "postDownloadFunction": {
            "title": "Post-download function",
            "type": "string",
            "description": "Function that specifies how will be the data transformed before downloading the image. The input and output of the function is the whole data array. By default it adds either the file URL or errors array depending if the download was successfull.",
            "editor": "javascript",
            "prefill": ""
        },
        "maxItems":{
            "title": "Max items",
            "type": "integer",
            "description": "You can restrict the number of items (not images) which images will be downloaded. Useful for testing. Default is all items.",
            "minimum": 1
        },
        "concurrency":{
            "title": "Max concurrency",
            "type": "integer",
            "description": "You can specify how many maximum parallel downloading/uploading requests will be running. Keep in mind that the limit is here to not overload the host server.",
            "default": 40
        },
        "imageCheckMaxRetries":{
            "title": "Max retries",
            "type": "integer",
            "description": "How many times should actor retry if the file it tries to download fails to pass the tests. Setting this too high can lead to unecessary loops.",
            "minimum": 0,
            "default": 1
        },
        "imageCheckType": {
            "title": "Image check type",
            "type": "string",
            "description": "Type of the image check. If the image will not pass, the download will be retied with proxy and if that doesn't pass, the image is not uploaded.",
            "enum": ["none", "content-type", "image-size"],
            "default": "content-type"
        },
        "imageCheckMinSize":{
            "title": "Min size in KB",
            "type": "integer",
            "description": "Minimum size of the image to pass the image check test",
            "minimum": 1
        },
        "imageCheckMinWidth":{
            "title": "Min width",
            "type": "integer",
            "description": "Minimim width of the image in pixels to pass the image check. Works only if the image check type is 'jimp'.",
            "minimum": 1
        },
        "imageCheckMinHeight":{
            "title": "Min height",
            "type": "integer",
            "description": "Minimim height of the image in pixels to pass the image check. Works only if the image check type is 'jimp'.",
            "minimum": 1
        },
        "uploadTo": {
            "title": "Upload to",
            "type": "string",
            "description": "Where do you want to upload the image files",
            "enum": ["key-value-store", "s3", "no-upload"]
        },
        "uploadStoreName": {
            "title": "Key-value store name",
            "type": "string",
            "description": "Key-value store name where the images will be upload. Empty field means it will be uploaded to the default key-value store",
            "editor": "textfield"
        },
        "s3Bucket":{
            "title": "S3 Bucket",
            "type": "string",
            "description": "Only relevant if you want to upload to S3! Name of the bucket where to upload.",
            "editor": "textfield"
        },
        "s3AccessKeyId":{
            "title": "S3 Access key id",
            "type": "string",
            "description": "Only relevant if you want to upload to S3! You can create these credentials for IAM user.",
            "editor": "textfield"
        },
        "s3SecretAccessKey":{
            "title": "S3 Secret access key",
            "type": "string",
            "description": "Only relevant if you want to upload to S3! You can create these credentials for IAM user.",
            "editor": "textfield"
        },
        "s3CheckIfAlreadyThere": {
            "title": "Check if key is already on S3",
            "type": "boolean",
            "description": "This option is useful if you don't want to rewrite the same image. GET requests are also cheaper than PUT requests"
        },
        "downloadTimeout": {
            "title": "Download timeout",
            "type": "integer",
            "description": "How long we will wait to download each image",
            "minimum": 100
        },
        "batchSize": {
            "title": "Batch Size",
            "type": "integer",
            "description": "Number of items loaded from dataset in one batch.",
            "minimum": 100,
            "default": 10000
        },
        "convertWebpToPng": {
            "title": "Convert webp to png",
            "type": "boolean",
            "description": "If checked, the actor will automatically convert all webp type images to standard png. This increases the size of the image."
        },
        "propagateSizes": {
            "title": "Propagate Sizes",
            "type": "boolean",
            "description": "If you want the state object to hold info about the image size."
        },
        "isDebug": {
            "title": "Debug",
            "type": "boolean",
            "description": "Measures memory and times."
        }
    }
}
